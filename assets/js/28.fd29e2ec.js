(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{295:function(a,t,s){"use strict";s.r(t);var e=s(13),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"一、数组属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、数组属性"}},[a._v("#")]),a._v(" 一、数组属性")]),a._v(" "),t("ul",[t("li",[a._v("constructor\t返回创建数组对象的原型函数")]),a._v(" "),t("li",[a._v("length\t设置或返回数组元素的个数")]),a._v(" "),t("li",[a._v("prototype\t允许你向数组对象添加属性或方法")])]),a._v(" "),t("h3",{attrs:{id:"二、array对象方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、array对象方法"}},[a._v("#")]),a._v(" 二、Array对象方法")]),a._v(" "),t("h4",{attrs:{id:"_1、concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、concat"}},[a._v("#")]),a._v(" 1、concat()")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("定义和用法：\n用于连接两个或多个数组\n该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本\n语法：\narray1.concat(array2,array3,...,arrayX)\n")])])]),t("h4",{attrs:{id:"_2、copywithin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、copywithin"}},[a._v("#")]),a._v(" 2、copyWithin()")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("定义和用法：\n用于从数组的指定位置拷贝元素到数组的另一个指定位置中\n语法：\narray.copyWithin(target, start, end)\n参数：\ntarget\t必需。复制到指定目标索引位置。\nstart\t可选。元素复制的起始位置。\nend\t可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。\n")])])]),t("h4",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-7"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-8"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-9"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h4",{attrs:{id:"-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-10"}},[a._v("#")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h2",{attrs:{id:"一、通过改变数组里元素位置-实现换位、置顶、上移、下移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、通过改变数组里元素位置-实现换位、置顶、上移、下移"}},[a._v("#")]),a._v(" 一、通过改变数组里元素位置，实现换位、置顶、上移、下移")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var fieldData=[\n    {id:'1',val:'一'},\n    {id:'2',val:'二'},\n    {id:'3',val:'三'},\n    {id:'4',val:'四'},\n    {id:'5',val:'五'}\n    ];\nvar index=9;\n")])])]),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理：")]),a._v(" "),t("ul",[t("li",[a._v("unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。")]),a._v(" "),t("li",[a._v("shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。")]),a._v(" "),t("li",[a._v("splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。")])]),a._v(" "),t("h4",{attrs:{id:"_1-两个元素换位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-两个元素换位"}},[a._v("#")]),a._v(" 1. 两个元素换位：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function swapArr(arr, index1, index2) {\n    arr[index1] = arr.splice(index2, 1, arr[index1])[0];\n    return arr;\n}\n")])])]),t("h4",{attrs:{id:"_2-置顶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-置顶"}},[a._v("#")]),a._v(" 2. 置顶：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function toFirst(fieldData,index) {\n    if(index!=0){\n        fieldData.unshift(fieldData.splice(index , 1)[0]);\n    }\n}\n")])])]),t("h4",{attrs:{id:"_3-up上移一格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-up上移一格"}},[a._v("#")]),a._v(" 3. up上移一格：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function upGo(fieldData,index){\n    if(index!=0){\n        fieldData[index] = fieldData.splice(index-1, 1, fieldData[index])[0];\n    }else{\n        fieldData.push(fieldData.shift());\n    }\n}\n")])])]),t("h4",{attrs:{id:"_4-down下移一格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-down下移一格"}},[a._v("#")]),a._v(" 4. down下移一格：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function downGo(fieldData,index) {\n    if(index!=fieldData.length-1){\n        fieldData[index] = fieldData.splice(index+1, 1, fieldData[index])[0];\n    }else{\n        fieldData.unshift( fieldData.splice(index,1)[0]);\n    }\n}\n")])])]),t("h2",{attrs:{id:"二、数组拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、数组拼接"}},[a._v("#")]),a._v(" 二、数组拼接")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var a = [1,2,3,4,5,6];\nvar b=["foo","bar", "fun"];\n// [1,2,3,4,5,6,"foo","bar","fun"]\n')])])]),t("h4",{attrs:{id:"方法1-concat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法1-concat"}},[a._v("#")]),a._v(" 方法1：concat")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("c=a.concat(b);\n")])])]),t("p",[a._v("此时c是新数组，此时内存使用有，c,a,b三个数组。")]),a._v(" "),t("h4",{attrs:{id:"方法2-不使用新数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法2-不使用新数组"}},[a._v("#")]),a._v(" 方法2:不使用新数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for(var i=0;i<b.length;i++){\n　　a.push(b[i]);\n}\nb=null;\n")])])]),t("p",[a._v("没有新的数组创建，对于内存来说更优。注意到结尾的b=null;拼接完成后将数组b清空。")]),a._v(" "),t("h4",{attrs:{id:"方法3-apply-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法3-apply-推荐"}},[a._v("#")]),a._v(" 方法3:apply(推荐）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a.push.apply(a,b);\n")])])]),t("h4",{attrs:{id:"方法4-es6的写法-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法4-es6的写法-推荐"}},[a._v("#")]),a._v(" 方法4:es6的写法（推荐）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a.push(...b)；\n")])])]),t("h2",{attrs:{id:"三、查找数组中指定元素并返回该元素的所有索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、查找数组中指定元素并返回该元素的所有索引"}},[a._v("#")]),a._v(" 三、查找数组中指定元素并返回该元素的所有索引")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//在数组中查找所有出现的x，并返回一个包含匹配索引的数组\nfunction findall(a, x) {\n    var results = [],\n        len = a.length,\n        pos = 0;\n    while (pos < len) {\n        pos = a.indexOf(x, pos);\n        if (pos === -1) { //未找到就退出循环完成搜索\n            break;\n        }\n        results.push(pos); //找到就存储索引\n        pos += 1; //并从下个位置开始搜索\n    }\n    return results;\n}\nvar arr = [1, 2, 3, 1, 4, 1, 4, 1];\nfindall(arr, 1); //返回[0,3,5,7]\n")])])]),t("h2",{attrs:{id:"四、判断数组中是否存在某个对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、判断数组中是否存在某个对象"}},[a._v("#")]),a._v(" 四、判断数组中是否存在某个对象")]),a._v(" "),t("ol",[t("li",[a._v("判断数组中是否存在某个元素，indexOf存在返回当前索引不存在返回-1")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr=[1,2,3,4]\narr.indexOf(3) // 2\narr.indexOf(5) // -1\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("利用数组API some来判断是否存在某个对象")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var result = arr.some(item=>{\n   if(item.name=='张三'){\n      return true \n  } \n})\nconsole.log(result) //如果arr数组对象中含有name:'张三',就会返回true，否则返回false\n")])])]),t("h2",{attrs:{id:"_1-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-map"}},[a._v("#")]),a._v(" 1.map")]),a._v(" "),t("p",[a._v("有返回值，返回一个新的数组，每个元素为调用func的结果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list = [1, 2, 3, 4, 5];\nlet other = list.map((d, i) => {\n  return d * 2;\n});\nconsole.log(other);\n// print: [2, 4, 6, 8, 10]\n")])])]),t("h2",{attrs:{id:"_2-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-filter"}},[a._v("#")]),a._v(" 2.filter")]),a._v(" "),t("p",[a._v("有返回值，返回一个符合func条件的元素数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list = [1, 2, 3, 4, 5];\nlet other = list.filter((d, i) => {\n  return d % 2;\n});\nconsole.log(other);\n// print: [1, 3, 5]\n")])])]),t("h2",{attrs:{id:"_3-some"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-some"}},[a._v("#")]),a._v(" 3.some")]),a._v(" "),t("p",[a._v("返回一个boolean，判断是否有元素符合func条件，如果有一个元素符合func条件，则循环会终止。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list = [1, 2, 3, 4, 5];\nlist.some((d, i) => {\n  console.log(d, i);\n  return d > 3;\n});\n// print: 1,0 2,1 3,2 4,3\n// return false\n")])])]),t("h2",{attrs:{id:"_4-every"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-every"}},[a._v("#")]),a._v(" 4.every")]),a._v(" "),t("p",[a._v("返回一个boolean，判断每个元素是否符合func条件，有一个元素不满足func条件，则循环终止，返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list = [1, 2, 3, 4, 5];\nlist.every((d, i) => {\n  console.log(d, i);\n  return d < 3;\n});\n// print: 1,0 2,1 3,2\n// return false\n")])])]),t("h2",{attrs:{id:"_5-foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-foreach"}},[a._v("#")]),a._v(" 5.forEach")]),a._v(" "),t("p",[a._v("没有返回值，只针对每个元素调用func。")]),a._v(" "),t("p",[a._v("优点：代码简介。")]),a._v(" "),t("p",[a._v("缺点：无法使用break，return等终止循环。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list = [1, 2, 3, 4, 5];\nlet other = [];\nlist.forEach((d, i) => {\n  other.push(d * 2);\n});\nconsole.log(other);\n// print: [2, 4, 6, 8, 10]\n")])])]),t("h2",{attrs:{id:"_6-for-in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-for-in"}},[a._v("#")]),a._v(" 6.for in")]),a._v(" "),t("p",[a._v("for-in循环实际是为循环”enumerable“对象而设计的，for in也可以循环数组，但是不推荐这样使用，for–in是用来循环带有字符串key的对象的方法。")]),a._v(" "),t("p",[a._v("缺点：只能获得对象的键名，不能直接获取键值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var obj = {a:1, b:2, c:3};\nfor (var prop in obj) {\n console.log("obj." + prop + " = " + obj[prop]);\n}\n// print: "obj.a = 1" "obj.b = 2" "obj.c = 3"\n')])])]),t("h2",{attrs:{id:"_7-for-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-for-of"}},[a._v("#")]),a._v(" 7.for of")]),a._v(" "),t("p",[a._v("for of为ES6提供，具有iterator接口，就可以用for of循环遍历它的成员。也就是说，for of循环内部调用的是数据结构的Symbol.iterator方法。")]),a._v(" "),t("p",[a._v("for of循环可以使用的范围包括数组、Set和Map结构、某些类似数组的对象（比如arguments对象、DOM NodeList对象）、后文的Generator对象，以及字符串。")]),a._v(" "),t("p",[a._v("有些数据结构是在现有数据结构的基础上，计算生成的。比如，ES6的数组、Set、Map都部署了以下三个方法，调用后都返回遍历器对象。")]),a._v(" "),t("p",[a._v("entries")]),a._v(" "),t("p",[a._v("entries() 返回一个遍历器对象，用来遍历[键名, 键值]组成的数组。对于数组，键名就是索引值；对于Set，键名与键值相同。Map结构的iterator接口，默认就是调用entries方法。")]),a._v(" "),t("p",[a._v("keys")]),a._v(" "),t("p",[a._v("keys() 返回一个遍历器对象，用来遍历所有的键名。")]),a._v(" "),t("p",[a._v("values")]),a._v(" "),t("p",[a._v("values() 返回一个遍历器对象，用来遍历所有的键值。")]),a._v(" "),t("p",[a._v("这三个方法调用后生成的遍历器对象，所遍历的都是计算生成的数据结构。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 字符串\nlet str = "hello";\nfor (let s of str) {\n console.log(s); // h e l l o\n}\n// 遍历数组\nlet list = [1, 2, 3, 4, 5];\nfor (let e of list) {\n  console.log(e);\n}\n// print: 1 2 3 4 5\n// 遍历对象\nobj = {a:1, b:2, c:3};\nfor (let key of Object.keys(obj)) {\n console.log(key, obj[key]);\n}\n// print: a 1 b 2 c 3\n')])])]),t("p",[a._v("说明：对于普通的对象，for...in循环可以遍历键名，for...of循环会报错。")]),a._v(" "),t("p",[a._v("一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// entries\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);