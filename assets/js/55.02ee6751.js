(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{322:function(a,t,s){"use strict";s.r(t);var r=s(13),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[a._v("#")]),a._v(" Git")]),a._v(" "),t("h3",{attrs:{id:"一、恢复被删除得分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、恢复被删除得分支"}},[a._v("#")]),a._v(" 一、恢复被删除得分支")]),a._v(" "),t("h4",{attrs:{id:"_1-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-删除"}},[a._v("#")]),a._v(" 1.删除")]),a._v(" "),t("p",[a._v("查看当前项目的分支")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ git branch\n")])])]),t("p",[a._v("假设有master和newBr两个分支，切换到master分支后删除newBr分支（不能在当前分支删除分支本身）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ git branch -d newBr\n")])])]),t("p",[a._v("如果newBr没有合并会报错，可继续强行删除。分支被成功删除，记住被删除分支所指向commit对象的sha-1值（例：a12b74f）")]),a._v(" "),t("h4",{attrs:{id:"_2-恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-恢复"}},[a._v("#")]),a._v(" 2.恢复")]),a._v(" "),t("p",[a._v("以a12b74f对象为基础再创建一个分支即可")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ git branch newBr1 a12b74f\n")])])]),t("p",[a._v("如果忘记了commit对象的sha-1值，可以通过git reflog命令找回")]),a._v(" "),t("h4",{attrs:{id:"_3-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-原理"}},[a._v("#")]),a._v(" 3.原理")]),a._v(" "),t("p",[a._v("删除分支的本质，其实是删除了.git/refs/heads/目录下的一个与分支同名文件，文件内容是一个分支所指向commit对象的sha-1值。也就是说真正删除的并不是commit对象本身，更为形象的说就是揭掉贴在commit对象上的标签，当然我们可以再贴上一个标签。")])])}),[],!1,null,null,null);t.default=e.exports}}]);