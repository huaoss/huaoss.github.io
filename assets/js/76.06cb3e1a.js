(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{340:function(e,t,a){"use strict";a.r(t);var n=a(13),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"三、按钮权限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、按钮权限"}},[e._v("#")]),e._v(" 三、按钮权限")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("定义按钮权限的指令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" // vue2.0\n\n import Vue from 'vue'\n\n Vue.directive('has', {\n     inserted: function (el, binding, vnode){\n         let isExist = false\n         // 从配置获取用户按钮权限\n         let btnPermissions = vnode.context.$route.meta.btnPermissions\n         if (btnPermissions && btnPermissions.indexOf(binding.value) > -1) {\n             isExist = true\n         }\n         //不存在时删除节点\n         if (el.parentNode && !isExist) {\n             el.parentNode.removeChild(el)\n         }\n     }\n })\n\n // vue 3.0\n\n import App from './App.vue'\n const app = createApp(App);\n\n app.directive('button', {\n     mounted(el, binding) {\n         let isExist = false\n         // 从配置获取用户按钮权限\n         let btnPermissions = router.currentRoute.value.meta.btnPermissions\n         if (btnPermissions && btnPermissions.indexOf(binding.value) > -1) {\n             isExist = true\n         }\n         //不存在时删除节点\n         if (el.parentNode && !isExist) {\n             el.parentNode.removeChild(el)\n         }\n     }\n })       \n")])])])]),e._v(" "),t("li")]),e._v(" "),t("h2",{attrs:{id:"四、vue-directive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、vue-directive"}},[e._v("#")]),e._v(" 四、vue.directive")]),e._v(" "),t("ul",[t("li",[e._v("完全使用vue3还是兼容v2，setup")]),e._v(" "),t("li",[e._v("如何理解单项数据流")]),e._v(" "),t("li",[e._v("插槽")])]),e._v(" "),t("h2",{attrs:{id:"_1-vue双向数据绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue双向数据绑定原理"}},[e._v("#")]),e._v(" 1. vue双向数据绑定原理？")]),e._v(" "),t("p",[e._v("采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),e._v(" "),t("h2",{attrs:{id:"_2-v-model使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-v-model使用"}},[e._v("#")]),e._v(" 2. v-model使用？")]),e._v(" "),t("p",[e._v("v-model本质上是一个语法糖,通过编译模板文件，为控件的v-model绑定input事件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<input v-model="sth" />\n//  等同于\n<input :value="sth" @input="sth = $event.target.value" />\n')])])]),t("p",[e._v("满足语法糖规则：属性必须为value，方法名必须为：input。")]),e._v(" "),t("p",[e._v("如果不是输入框，没有value属性。可以通过伪造拼凑成语法糖的样子，实现v-model")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 比如复选框，没有value，也没有input方法\n<input type="checkbox" :checkd="value" @change="handleChecked"/>\n\n// 自定义组件，拼凑语法糖\n<my-component :value="price" @input="price = $event.target.value"></my-component>\n\ntemplate: `\n    <span>\n      <input\n        type="checkbox"\n        :checked="value"\n        @change="$emit(\'input\', $event.target.checked)"\n      >\n    </span>\n  `,\n  props: [\'value\'],\n})\n\n//  得到了一样的结果\n<my-component v-model="price"></my-component>\n')])])]),t("h2",{attrs:{id:"_3-data为什么是函数不是对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-data为什么是函数不是对象"}},[e._v("#")]),e._v(" 3. data为什么是函数不是对象？")]),e._v(" "),t("p",[e._v("为了让组件有自己的作用域，它必须包含私有变量data")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var component=function(){\n    this.data=this.data();//存在私有的data属性\n}\n")])])]),t("p",[e._v("如果不以函数的形式处理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var component=function(){\n//不存在私有的data属性\n}\ncomponent.propotype.data= {count:0}\n//此时，data不作为私有变量，就会有暴露的风险，而且，它指向的是{count:0}的引用，所以当重复创建\n")])])]),t("p",[e._v("所以单页面中引入vue时可以让data成为对象，组件中必须用return包裹，成为函数")]),e._v(" "),t("h2",{attrs:{id:"vue3不再支持-v-model-而使用-sync-来代替"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue3不再支持-v-model-而使用-sync-来代替"}},[e._v("#")]),e._v(" vue3不再支持 v-model ，而使用 .sync 来代替")]),e._v(" "),t("h2",{attrs:{id:"权限管理-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#权限管理-指令"}},[e._v("#")]),e._v(" 权限管理+指令")]),e._v(" "),t("h2",{attrs:{id:"watch和computed的用法区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#watch和computed的用法区别是什么"}},[e._v("#")]),e._v(" watch和computed的用法区别是什么？")]),e._v(" "),t("h4",{attrs:{id:"在简单的vue实例中看到的vue实例中data属性是如下方式展示的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在简单的vue实例中看到的vue实例中data属性是如下方式展示的"}},[e._v("#")]),e._v(" 在简单的vue实例中看到的Vue实例中data属性是如下方式展示的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let app= newVue({\n    el:\"#app\",\n    data:{\n        msg:''\n    },\n    methods:{\n    }\n})\n")])])]),t("h4",{attrs:{id:"在使用组件化的项目中使用的是如下形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在使用组件化的项目中使用的是如下形式"}},[e._v("#")]),e._v(" 在使用组件化的项目中使用的是如下形式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export default{\n data(){\n  return {\n   showLogin:true,\n   // def_act: '/A_VUE',\n   msg: 'hello vue',\n   user:'',\n   homeContent: false,\n  }\n },\n methods:{\n   \n }\n}\n")])])]),t("h2",{attrs:{id:"一、父子props传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、父子props传参"}},[e._v("#")]),e._v(" 一、父子props传参")]),e._v(" "),t("h3",{attrs:{id:"_1、父向子传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、父向子传参"}},[e._v("#")]),e._v(" 1、父向子传参")]),e._v(" "),t("p",[e._v("子组件 header.vue 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<h>{{logo}}</h>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("props: ['logo']\n")])])]),t("p",[e._v("父组件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<v-header :logo="logoMsg"></v-header>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Header from './components/header'\ndata(){\n    return{\n        logoMsg: '哈哈哈哈'\n    }\n},\ncomponents: {\n    v-header: Header,\n}\n")])])]),t("h3",{attrs:{id:"_2、子向父传数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、子向父传数据"}},[e._v("#")]),e._v(" 2、子向父传数据")]),e._v(" "),t("p",[e._v("子组件 login.vue 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<input v-model="username" @change="sendUser" />\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("methods: {\n    sendUser(){\n        this.$emit('transferFun', this.username)\n    },\n}\n")])])]),t("p",[e._v("父组件中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<v-login @transferFun="getUser"></v-login>\n<p>{{user}}</p>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Login from './components/login'\ndata(){\n    return{\n        user: ''\n    }\n},\ncomponents: {\n    v-login: Login,\n},\nmethods:{\n    getUser(msg){\n        this.user = msg\n    }\n}\n")])])]),t("p",[e._v("==ps:== Vue 没有直接子对子传参的方法，建议将需要传递数据的子组件，都合并为一个组件。如果一定需要子对子传参，可以先从传到父组件，再传到子组件。")]),e._v(" "),t("h2",{attrs:{id:"二、状态管理工具vuex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、状态管理工具vuex"}},[e._v("#")]),e._v(" 二、状态管理工具Vuex")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])])])}),[],!1,null,null,null);t.default=s.exports}}]);