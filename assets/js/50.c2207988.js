(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{319:function(t,n,a){"use strict";a.r(n);var e=a(13),s=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"防抖和节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防抖和节流"}},[t._v("#")]),t._v(" 防抖和节流")]),t._v(" "),n("ul",[n("li",[t._v("本质都是控制事件执行的频率")]),t._v(" "),n("li",[t._v("防抖是在用户多次触发事件，当用户停止触发事件，将事件执行一次")]),t._v(" "),n("li",[t._v("节流是用户多次触发事件，会在多次触发的过程中，间隔执行事件")])]),t._v(" "),n("h2",{attrs:{id:"防抖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防抖"}},[t._v("#")]),t._v(" 防抖")]),t._v(" "),n("p",[t._v("原理：")]),t._v(" "),n("p",[t._v("用户每一次触发事件都会延迟执行，在设置延迟定时器执之前都会把上一次延迟定时器清除，最终只有用户连续触发这个事件的间隔时间超出我们设置的参数ms毫秒之后,该事件才会触发一次")]),t._v(" "),n("p",[t._v("实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// @fn 是对应请求数据\n// @ms 是用户多次触发事件的时间间隔 是一个毫秒数\nfunction debounce(fn, ms) {\n    let timeout = null\n    return function() {\n        clearTimeout(timeout)\n        timeout = setTimeout(() => {\n            fn.apply(this, arguments)\n        }, ms)\n    }\n}\n")])])]),n("p",[t._v("使用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("<input id=\"searchInput\"/>\nfunction getData(){\n    console.log('发送请求...')\n}\ndocument.getElementById('searchInput').oninput = debounce(getData, 800)\n// 如果用户一直在输入，是不会发送请求\n// 只有用户连续输入时间间隔超过800ms之后才会请求一次数据，也就是用户在800ms内没有输入才会去请求数据\n")])])]),n("h2",{attrs:{id:"节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节流"}},[t._v("#")]),t._v(" 节流")]),t._v(" "),n("p",[t._v("原理：")]),t._v(" "),n("p",[t._v("用户每一次触发事件都会设置一个延迟定时器，但是如果已经设置了延迟定时器就会等上一次延迟定时器执行之后才会开启下一个定时器，这样用户一直触发事件，事件会每间隔一段时间执行一次")]),t._v(" "),n("p",[t._v("实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("// @fn 是对应请求数据\n// @ms 是用户多次触发事件的时间间隔 是一个毫秒数\n function throttle(fn, ms){\n    let flag = true\n    return function(){\n        if(!flag) return\n        flag = false\n        setTimeout(()=>{\n            fn.apply(this, arguments)\n            flag = true\n        }, ms)\n    }\n}\n")])])]),n("p",[t._v("使用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("function getData(){\n    console.log('发送请求...')\n}\nwindow.onscroll = throttle(getData, 800)\n// 用户在滚动的过程中，会间隔去请求数据\n")])])]),n("h2",{attrs:{id:"搜索框请求过期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搜索框请求过期"}},[t._v("#")]),t._v(" 搜索框请求过期")]),t._v(" "),n("p",[t._v("输入框输入一次请求一次，如果上一次的请求后返回")]),t._v(" "),n("p",[t._v("每次请求的时候端上生成随机串跟接口一起提交，接口同时返回这个随机串，端上盘多随机串是不是最新的")]),t._v(" "),n("p",[t._v("或者对比输入内容")])])}),[],!1,null,null,null);n.default=s.exports}}]);