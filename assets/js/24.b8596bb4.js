(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{290:function(n,t,e){"use strict";e.r(t);var r=e(13),o=Object(r.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://www.runoob.com/w3cnote/es6-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("ECMAScript 6.0"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"_1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1"}},[n._v("#")]),n._v(" 1.1")]),n._v(" "),t("h2",{attrs:{id:"_1-2-环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-环境搭建"}},[n._v("#")]),n._v(" 1.2 环境搭建")]),n._v(" "),t("h2",{attrs:{id:"_2-1-es6-let-与-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-es6-let-与-const"}},[n._v("#")]),n._v(" 2.1 ES6 let 与 const")]),n._v(" "),t("p",[n._v("新增 let 和 const 关键字：")]),n._v(" "),t("ul",[t("li",[n._v("let 声明的变量只在 let 命令所在的代码块{}内有效，var 是在全局范围内有效")]),n._v(" "),t("li",[n._v("let 只能声明一次， var 可以声明多次")]),n._v(" "),t("li")]),n._v(" "),t("p",[n._v("次；")]),n._v(" "),t("p",[n._v("const 声明一个只读的常量，一旦声明，常量的值就不能改变。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/function",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考：ECMAScript 6 入门"),t("OutboundLink")],1)]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("一、块及作用域：{}\n在ES6语法中，{}中的内容作为一个代码块；\n通过let声明的变量，只有在其定义的代码块中生效。\n\n二、新的变量赋值模式：\nvar [a, b, c] = [1, 2, 3];\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n可以通过数组和对象的形式给群组变量赋值\n\n三、模板字符串``：通过``定义的字符串当中，可以通过${}直接加入变量。\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nvar text=`输出字符串:${baz}`;\nconsole.log(text);\n\n四、函数中形参的默认值：\nfunction f(x, y, z=0) {\n  console.log(z);\n}\nf(0,1,2);\n\n五、箭头函数：=>\n//f为函数名，v是参数，=>后面相当于return的内容\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n参数可以通过()传如多个参数，如：\nvar f=(a,b,c)=>a+b+c;\n\n六、功能强大的扩展运算符：”...”\nvar nodeList = document.querySelectorAll('div');\nvar array = [...nodeList];\n上面代码通过扩展运算符将伪数组转数组\n\n// ES5的写法\nMath.max.apply(null, [14, 3, 77])\n// ES6的写法\nMath.max(...[14, 3, 77])\n上面代码通过扩展运算符取数组最大值\n扩展运算符功能不仅于此，详情请参阅ES6官方文档\n\n对象扩展：\nvar o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n对象属性简写\n\nObject.is(null, null);\n判断严格相等函数,上面函数结果返回true\n\nObject.assign(obj,obj02)\n对象合并，但是使用浅拷贝机制，类似jquery.extend()函数用法\n\nSet类型：类似数组，但不是数组，ES6中的新类型，不会接收重复的值\nvar arr=[1,2,3,4,4,5,6,78,8,4,4,3];\n// 去除数组的重复成员\nconsole.log([...new Set(arr)]);\n详细属性及方法请参阅文档\n\nMap类型：真正的键值对类型，可以以任何类型作为建，也可以赋值任何类型为键的值\nvar m = new Map();\nvar o = {p: 'Hello World'};\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nPromise异步操作对象：\n以下代码为异步加载图片函数\nfunction loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    var image = new Image();\n\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n    image.src = url;\n  });\n}\nloadImageAsync(\"img/4-15012G52133.jpg\").then(function(img){\nconsole.log(img);\n},function(err){\n\n});\n\nClass：JS中的类\n//定义类\nclass Point {\n/*构造器*/\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n/*prototype中的函数*/\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n类的继承extends：其中super指向父类构造器\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n}\n模块处理：export和import\n模块输出页面,exText.js\nexport var a=\"vvvvv\";\n模块引入：{a}接收的模块，'./exText'模块所在文件位置\nimport {a} from './exText';\nconsole.log(a);\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);