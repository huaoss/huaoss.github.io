(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{294:function(e,s,r){"use strict";r.r(s);var t=r(13),a=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("前言一、在JavaScript的世界中，所有代码都是单线程执行的。")]),e._v(" "),s("p",[e._v("由于这个“缺陷”，导致JavaScript的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function callback() {\n    console.log('Done');\n}\nconsole.log('before setTimeout()');\nsetTimeout(callback, 1000); // 1秒钟后调用callback函数\nconsole.log('after setTimeout()');\n\n// 打印结果如下：\n// before setTimeout()\n// after setTimeout()\n// (等待1秒后)\n// Done\n")])])]),s("p",[e._v("可见，异步操作会在将来的某个时间点触发一个函数调用。")]),e._v(" "),s("p",[e._v("前言二、AJAX就是典型的异步操作。如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("request.onreadystatechange = function () {\n    if (request.readyState === 4) {\n        if (request.status === 200) {\n            return success(request.responseText);\n        } else {\n            return fail(request.status);\n        }\n    }\n}\n")])])]),s("p",[e._v("把回调函数success(request.responseText)和fail(request.status)写到一个AJAX操作里很正常，但是不好看，而且不利于代码复用。")]),e._v(" "),s("p",[e._v("有没有更好的写法？比如写成这样：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var ajax = ajaxGet('http://...');\najax.ifSuccess(success)\n    .ifFail(fail);\n")])])]),s("p",[e._v("这种链式写法的好处在于，先统一执行AJAX逻辑，不关心如何处理结果，然后，根据结果是成功还是失败，在将来的某个时候调用success函数或fail函数。")]),e._v(" "),s("p",[e._v("古人云：“君子一诺千金”，这种“承诺将来会执行”的对象在JavaScript中称为Promise对象。")]),e._v(" "),s("p",[e._v("Promise有各种开源实现，在ES6中被统一规范，由浏览器直接支持。")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"一、javascript-promise-对象介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript-promise-对象介绍"}},[e._v("#")]),e._v(" 一、JavaScript Promise 对象介绍")]),e._v(" "),s("p",[e._v("ECMAscript 6 原生提供了 Promise 对象。")]),e._v(" "),s("p",[e._v("Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。")]),e._v(" "),s("h3",{attrs:{id:"二、promise-对象有以下两个特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、promise-对象有以下两个特点"}},[e._v("#")]),e._v(" 二、Promise 对象有以下两个特点:")]),e._v(" "),s("p",[e._v("1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：")]),e._v(" "),s("ul",[s("li",[e._v("pending: 初始状态，不是成功或失败状态。")]),e._v(" "),s("li",[e._v("fulfilled: 意味着操作成功完成。")]),e._v(" "),s("li",[e._v("rejected: 意味着操作失败。")])]),e._v(" "),s("p",[e._v("只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。")]),e._v(" "),s("p",[e._v("2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。")]),e._v(" "),s("h3",{attrs:{id:"三、promise-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、promise-优缺点"}},[e._v("#")]),e._v(" 三、Promise 优缺点")]),e._v(" "),s("p",[e._v("有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。")]),e._v(" "),s("p",[e._v("Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),e._v(" "),s("h3",{attrs:{id:"四、promise-创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、promise-创建"}},[e._v("#")]),e._v(" 四、Promise 创建")]),e._v(" "),s("p",[e._v("要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。")]),e._v(" "),s("p",[e._v("下面是创建 promise 的步骤：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var promise = new Promise(function(resolve, reject) {\n    // 异步处理\n    // 处理结束后、调用resolve 或 reject\n});\n")])])]),s("p",[e._v("Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('var myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve("成功!"); //代码正常执行！\n    }, 250);\n});\n \nmyFirstPromise.then(function(successMessage){\n    //successMessage的值是上面调用resolve(...)方法传入的值.\n    //successMessage参数不一定非要是字符串类型，这里只是举个例子\n    document.write("Yay! " + successMessage);\n});\n')])])]),s("p",[e._v("对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调。")]),e._v(" "),s("p",[e._v("promise.then() 是 promise 最为常用的方法。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("promise.then(onFulfilled, onRejected)\n")])])]),s("p",[e._v("promise简化了对error的处理，上面的代码我们也可以这样写：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("promise.then(onFulfilled).catch(onRejected)\n")])])]),s("h3",{attrs:{id:"五、promise-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、promise-ajax"}},[e._v("#")]),e._v(" 五、Promise Ajax")]),e._v(" "),s("p",[e._v("下面是一个用 Promise 对象实现的 Ajax 操作的例子。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function ajax(URL) {\n    return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest(); \n        req.open('GET', URL, true);\n        req.onload = function () {\n        if (req.status === 200) { \n                resolve(req.responseText);\n            } else {\n                reject(new Error(req.statusText));\n            } \n        };\n        req.onerror = function () {\n            reject(new Error(req.statusText));\n        };\n        req.send(); \n    });\n}\nvar URL = \"/try/ajax/testpromise.php\"; \najax(URL).then(function onFulfilled(value){\n    document.write('内容是：' + value); \n}).catch(function onRejected(error){\n    document.write('错误：' + error); \n});\n")])])]),s("p",[e._v("上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var p1 = new Promise(function(resolve, reject){\n  // ... some code\n});\n \nvar p2 = new Promise(function(resolve, reject){\n  // ... some code\n  resolve(p1);\n})\n")])])]),s("p",[e._v("上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。")]),e._v(" "),s("h3",{attrs:{id:"六、promise-prototype-then方法-链式操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、promise-prototype-then方法-链式操作"}},[e._v("#")]),e._v(" 六、Promise.prototype.then方法：链式操作")]),e._v(" "),s("p",[e._v("Promise.prototype.then 方法返回的是一个新的 Promise 对象，因此可以采用链式写法。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('getJSON("/posts.json").then(function(json) {\n  return json.post;\n}).then(function(post) {\n  // proceed\n});\n')])])]),s("p",[e._v("上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。")]),e._v(" "),s("p",[e._v("如果前一个回调函数返回的是Promise对象，这时后一个回调函数就会等待该Promise对象有了运行结果，才会进一步调用。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('getJSON("/post/1.json").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // 对comments进行处理\n});\n')])])]),s("p",[e._v('这种设计使得嵌套的异步操作，可以被很容易得改写，从回调函数的"横向发展"改为"向下发展"。')]),e._v(" "),s("h3",{attrs:{id:"七、promise-prototype-catch方法-捕捉错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、promise-prototype-catch方法-捕捉错误"}},[e._v("#")]),e._v(" 七、Promise.prototype.catch方法：捕捉错误")]),e._v(" "),s("p",[e._v("Promise.prototype.catch 方法是 Promise.prototype.then(null, rejection) 的别名，用于指定发生错误时的回调函数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("getJSON(\"/posts.json\").then(function(posts) {\n  // some code\n}).catch(function(error) {\n  // 处理前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n")])])]),s("p",[e._v('Promise 对象的错误具有"冒泡"性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。')]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('getJSON("/post/1.json").then(function(post) {\n  return getJSON(post.commentURL);\n}).then(function(comments) {\n  // some code\n}).catch(function(error) {\n  // 处理前两个回调函数的错误\n});\n')])])]),s("h3",{attrs:{id:"八、promise-all方法-promise-race方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、promise-all方法-promise-race方法"}},[e._v("#")]),e._v(" 八、Promise.all方法，Promise.race方法")]),e._v(" "),s("p",[e._v("Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var p = Promise.all([p1,p2,p3]);\n")])])]),s("p",[e._v("上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）")]),e._v(" "),s("p",[e._v("p 的状态由 p1、p2、p3 决定，分成两种情况。")]),e._v(" "),s("ul",[s("li",[e._v("（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。")]),e._v(" "),s("li",[e._v("（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。")])]),e._v(" "),s("p",[e._v("下面是一个具体的例子。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function(id){\n  return getJSON("/post/" + id + ".json");\n});\n \nPromise.all(promises).then(function(posts) {\n  // ...  \n}).catch(function(reason){\n  // ...\n});\n')])])]),s("p",[e._v("Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var p = Promise.race([p1,p2,p3]);\n")])])]),s("p",[e._v("上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。")]),e._v(" "),s("p",[e._v("如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。")]),e._v(" "),s("h3",{attrs:{id:"九、promise-resolve-方法-promise-reject-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、promise-resolve-方法-promise-reject-方法"}},[e._v("#")]),e._v(" 九、Promise.resolve 方法，Promise.reject 方法")]),e._v(" "),s("p",[e._v("有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var jsPromise = Promise.resolve($.ajax('/whatever.json'));\n")])])]),s("p",[e._v("上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。")]),e._v(" "),s("p",[e._v("如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为fulfilled。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var p = Promise.resolve('Hello');\n \np.then(function (s){\n  console.log(s)\n});\n// Hello\n")])])]),s("p",[e._v("上面代码生成一个新的Promise对象的实例p，它的状态为fulfilled，所以回调函数会立即执行，Promise.resolve方法的参数就是回调函数的参数。")]),e._v(" "),s("p",[e._v("如果Promise.resolve方法的参数是一个Promise对象的实例，则会被原封不动地返回。")]),e._v(" "),s("p",[e._v("Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。Promise.reject方法的参数reason，会被传递给实例的回调函数。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var p = Promise.reject('出错了');\n \np.then(null, function (s){\n  console.log(s)\n});\n// 出错了\n")])])]),s("p",[e._v("上面代码生成一个Promise对象的实例，状态为rejected，回调函数会立即执行。")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"题一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题一"}},[e._v("#")]),e._v(" 题一")])])}),[],!1,null,null,null);s.default=a.exports}}]);