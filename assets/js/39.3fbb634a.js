(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{310:function(n,t,e){"use strict";e.r(t);var r=e(13),a=Object(r.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"实现点击li标签弹出索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现点击li标签弹出索引"}},[n._v("#")]),n._v(" 实现点击li标签弹出索引")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title></title>\n    </head>\n    <body>\n        <ul id=\"list\">\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n        </ul>\n        <script type=\"text/javascript\">\n            window.onload = function() {\n                //获取所有的li标签\n                // var list = document.getElementById('list').children;\n                // 推荐使用querySelectorAll方法获取\n                var list = document.querySelectorAll('#list>li');\n\n                // 方法一：使用setAttribute、getAttribute，直接往标签里添加索引\n                // for (var i = 0, len = list.length; i < len; i++) { //遍历每一个li标签\n                //     list[i].setAttribute('index', i); //给每一个li标签添加索引\n                //     list[i].onclick = function() {\n                //         alert(this.getAttribute('index')); //获取添加的li标签的元素值\n                //     }\n                // };\n\n                // 方法二：使用闭包\n                for (var i = 0, len = list.length; i < len; i++) { //遍历每一个li标签\n                    function outer() {\n                        var num = i;\n                        function inner() {\n                            alert(num);\n                        }\n                        return inner;\n                    }\n                    list[i].onclick = outer(); //给每一个li标签注册单击事件\n                };\n            }\n        <\/script>\n    </body>\n</html>\n")])])]),t("h2",{attrs:{id:"js添加和删除属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js添加和删除属性"}},[n._v("#")]),n._v(" js添加和删除属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 添加\nvar obj= {}\nobj.address=\"shenzhen\"\n\n// 删除\nvar obj= {\n    height: 180,\n    long: 180,\n    weight: 180,\n    hobby: {\n        ball: 'good',\n        music: 'nice'\n    }\n}\ndelete obj.hobby 已声明的对象不可删除, 对象中的对象属性可以删除\n")])])]),t("h2",{attrs:{id:"函数柯里化currying"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数柯里化currying"}},[n._v("#")]),n._v(" 函数柯里化Currying")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("参数复用")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("  // 正常正则验证字符串 reg.test(txt)\n\n  // 函数封装后\n  function check(reg, txt) {\n      return reg.test(txt)\n  }\n\n  check(/\\d+/g, 'test')       //false\n  check(/[a-z]+/g, 'test')    //true\n\n  // Currying后\n  function curryingCheck(reg) {\n      return function(txt) {\n          return reg.test(txt)\n      }\n  }\n\n  var hasNumber = curryingCheck(/\\d+/g)\n  var hasLetter = curryingCheck(/[a-z]+/g)\n\n  hasNumber('test1')      // true\n  hasNumber('testtest')   // false\n  hasLetter('21212')      // false\n")])])])]),n._v(" "),t("li",[t("p",[n._v("提前确认")])]),n._v(" "),t("li",[t("p",[n._v("延迟运行")])])]),n._v(" "),t("p",[n._v("curry的一些性能问题你只要知道下面四点就差不多了：")]),n._v(" "),t("ul",[t("li",[n._v("存取arguments对象通常要比存取命名参数要慢一点")]),n._v(" "),t("li",[n._v("一些老版本的浏览器在arguments.length的实现上是相当慢的")]),n._v(" "),t("li",[n._v("使用fn.apply( … ) 和 fn.call( … )通常比直接调用fn( … ) 稍微慢点")]),n._v(" "),t("li",[n._v("创建大量嵌套作用域和闭包函数会带来花销，无论是在内存还是速度上")])]),n._v(" "),t("p",[n._v("其实在大部分应用中，主要的性能瓶颈是在操作DOM节点上，这js的性能损耗基本是可以忽略不计的，所以curry是可以直接放心的使用。")]),n._v(" "),t("p",[n._v("题：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 实现一个add方法，使计算结果能够满足如下预期：\nadd(1)(2)(3) = 6;\nadd(1, 2, 3)(4) = 10;\nadd(1)(2)(3)(4)(5) = 15;\n\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = Array.prototype.slice.call(arguments);\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var _adder = function() {\n        _args.push(...arguments);\n        return _adder;\n    };\n\n    // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n    _adder.toString = function () {\n        return _args.reduce(function (a, b) {\n            return a + b;\n        });\n    }\n    return _adder;\n}\n\nadd(1)(2)(3)                // 6\nadd(1, 2, 3)(4)             // 10\nadd(1)(2)(3)(4)(5)          // 15\nadd(2, 6)(1)                // 9\n")])])]),t("h2",{attrs:{id:"prototype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[n._v("#")]),n._v(" prototype")]),n._v(" "),t("h2",{attrs:{id:"web防扒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web防扒"}},[n._v("#")]),n._v(" web防扒")]),n._v(" "),t("ul",[t("li",[n._v("禁用浏览器右键")]),n._v(" "),t("li",[n._v("监听键盘事件")]),n._v(" "),t("li",[n._v("检测控制台")]),n._v(" "),t("li",[n._v("鼠标点击事件")]),n._v(" "),t("li",[n._v("禁止保存")]),n._v(" "),t("li",[n._v("css禁止左键右键")])])])}),[],!1,null,null,null);t.default=a.exports}}]);