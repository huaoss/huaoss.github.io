(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{315:function(t,e,n){"use strict";n.r(e);var a=n(13),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),e("ul",[e("li",[t._v("创建对象的几种方式")]),t._v(" "),e("li",[t._v("原型、构造函数、实例、原型链")]),t._v(" "),e("li",[t._v("instanceof 的原理")]),t._v(" "),e("li",[t._v("new的工作原理")])]),t._v(" "),e("p",[t._v("一、创建对象的几种方法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("第一种 字面量创建的方式\n\nconst a = { 'name': 'tengwei' }\nconst a = new Object({ 'name': 'tengwei' })\n\n第二种  构造函数创建\nconst A = function(name) {this.name = name}\nconst A1 = new A('tengwei')\n\n第三种 通过Object.create()\nconst b = { name: 'tengwei' }\nconst b1 = Object.create(b)\n")])])]),e("p",[t._v("二、原型、构造函数、实例、原型链")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("实例：一个对象就是一个实例，实例的__proto__属性指向的是原型对象的prototype属性\n\n构造函数：任何一个函数只要被new使用了，那么这么函数就是构造函数；eg: new A()；构造函数就是个函数，它和普通函数的唯一区别就是可以用new 创建实例，且构造函数都有contructor属性\n\n原型：每个对象都有一个原型对象，对象以其原型为模板，从原型继承方法和属性，这些属性和方法定义在对象的构造器函数的prototype属性上，而非实例本身。每个原型对象都有contructor（构造器）属性，contrutor会默认指向你声明的这个函数\n\n原型链：每个对象都有一个原型对象，通过__proto__指针指向上一个原型，并从中继承方法和属性，同时原型对象也会拥有原型，这样一层一层的，最终指向null,这就是原型链\n")])])]),e("p",[t._v("三、instanceof 的原理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("instanceof的原理是通过判断实例对象的__proto__属性和构造函数的prototype属性是不是引用同一个原型地址，是返回true，不是返回false；\n\n注意点：__proto__在当前这个原型链上都会返回true， 看下面的案例\n\ninstanceof可以精准判断引用数据类型（Array，Function，Object），而基本数据类型不能被instanceof精准判断。\n因为内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。\n")])])]),e("p",[t._v("四、new的工作原理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("定义：创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实\n\n特性：\n可以访问原型中的属性\n可以访问构造函数中的属性\n\n原理：\n先创建一个Object对象实例\n将构造函数的执行对象赋给新生成的这个实例\n执行构造函数中的代码\n返回新生成的对象实例\n\n// 模拟实现最简单的new\nconst new = function (fn) {\n    // 创建一个对象\n    var obj = new Object(fn.prototype)\n    // 执行构造函数\n    var Con = fn.call(obj)\n    if (Con === 'object') {\n        return Con\n    } else {\n        return obj\n    }\n}\n\n// 改版的new实现\nfunction _new() {\n    // 创建一个空对象\n    var obj = new Object();\n    //获取构造函数，arguments中去除第一个属性\n    var Con = Array.prototype.shift.call(arguments);\n    // 链接到原型\n    obj.__proto__ = Con.prototype;\n    // 绑定this，实现继承\n    var ret = Con.apply(obj, arguments)\n    return ret instanceof Object ? ret : obj\n}\n")])])]),e("h2",{attrs:{id:"原型闭包-还有防抖截流-vue路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型闭包-还有防抖截流-vue路由"}},[t._v("#")]),t._v(" 原型闭包，还有防抖截流，vue路由")]),t._v(" "),e("p",[t._v("门户类网站，广告收费投放")]),t._v(" "),e("h2",{attrs:{id:"浅拷贝与深拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝与深拷贝"}},[t._v("#")]),t._v(" 浅拷贝与深拷贝")]),t._v(" "),e("p",[t._v("1、浅拷贝：两个变量指向了同一片存储区域")]),t._v(" "),e("h2",{attrs:{id:"solt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solt"}},[t._v("#")]),t._v(" solt")]),t._v(" "),e("h2",{attrs:{id:"setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" setup")]),t._v(" "),e("h2",{attrs:{id:"sort"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[t._v("#")]),t._v(" sort()")]),t._v(" "),e("h2",{attrs:{id:"async-await原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await原理"}},[t._v("#")]),t._v(" async/await原理")]),t._v(" "),e("p",[t._v("async/await是一种语法糖把 promise 做了一个包装\nawait 只能出现在 async 函数中，当调用一个 async 函数时，会返回一个 Promise 对象，把 await 后面的代码放到了 Promise.then()")]),t._v(" "),e("p",[t._v("async await 和 promise 的区别")]),t._v(" "),e("p",[t._v("async/await 出现的异常是无法捕获的，需要借助 try/catch 来捕获异常")]),t._v(" "),e("p",[t._v("任何一个await后面的promise对象变为reject，那么整个async都会被中断")]),t._v(" "),e("p",[t._v("使用 async await 的话，catch 能处理 JSON.parse 错误")]),t._v(" "),e("h2",{attrs:{id:"new一个对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new一个对象"}},[t._v("#")]),t._v(" new一个对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('// 定义一个 Person 对象\nfunction Person (phone, age) {\n    this.age = age;\n    this.phone = phone;\n    this.getPerson = function () { }\n}\n\n// new 一个实例\nlet person = new Person("12345", 30)\n// 得到了一个phone为"12345"，年龄为30的对象实例\n')])])]),e("ol",[e("li",[e("p",[t._v("创建一个空对象，此时obj的__proto__ 是null")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" var obj = {}\n var obj = new Object()\n")])])])]),t._v(" "),e("li",[e("p",[t._v("让新对象的 proto 变量指向 Person 原型对象空间")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" obj.__proto__ = Person.prototype;\n")])])])]),t._v(" "),e("li",[e("p",[t._v("借用Person构造函数中 apply 方法的为 obj 对象变量增加 age 属性和 phone 属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(' Person.apply(obj, ["12344", 23]);\n')])])])])]),t._v(" "),e("h2",{attrs:{id:"apply-call"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply-call"}},[t._v("#")]),t._v(" apply/call")]),t._v(" "),e("ul",[e("li",[t._v("call 和 apply  都是可以改变this 指向，call 方法中传递参数要求一个一个传递参数。 apply 方法要求传递参数是一个数组形式")])]),t._v(" "),e("h2",{attrs:{id:"computed-watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed-watch"}},[t._v("#")]),t._v(" computed/watch")]),t._v(" "),e("ul",[e("li",[t._v("computed用于处理复杂的逻辑运算，主要和methods储存方法来进行区分；methods储存方法，computed储存需要处理的数据值；methods每次都会调用，computed有缓存机制，只有改变时才执行，性能更佳。")]),t._v(" "),e("li",[t._v("watch用于监听数据变化，其中可以监听的数据来源有三部分：props、data、computed内的数据；watch提供两个参数（newValue，oldValue），第一个参数是新值，第二个参数保存旧值；")])]),t._v(" "),e("p",[t._v("computed是计算属性")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("支持缓存，只有依赖数据发生改变，才会重新进行计算")])]),t._v(" "),e("li",[e("p",[t._v("不支持异步，当computed内有异步操作时无效，无法监听数据的变化")])]),t._v(" "),e("li",[e("p",[t._v("computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过的数据通过计算得到的")])]),t._v(" "),e("li",[e("p",[t._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed")])]),t._v(" "),e("li",[e("p",[t._v("如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。")])])]),t._v(" "),e("p",[t._v("watch是侦听属性")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("不支持缓存，数据变，直接会触发相应的操作；")])]),t._v(" "),e("li",[e("p",[t._v("watch支持异步；")])]),t._v(" "),e("li",[e("p",[t._v("监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；")])]),t._v(" "),e("li",[e("p",[t._v("当一个属性发生变化时，需要执行对应的操作；一对多；")])])]),t._v(" "),e("h2",{attrs:{id:"闭包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),e("p",[t._v("什么是闭包?")]),t._v(" "),e("p",[t._v("简单来说，闭包是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。")]),t._v(" "),e("p",[t._v("为什么需要闭包？")]),t._v(" "),e("p",[t._v("局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。")]),t._v(" "),e("p",[t._v("特点")]),t._v(" "),e("p",[t._v("占用更多内存")]),t._v(" "),e("p",[t._v("不容易被释放")]),t._v(" "),e("p",[t._v("何时使用？")]),t._v(" "),e("p",[t._v("变量既想反复使用，又想避免全局污染")]),t._v(" "),e("p",[t._v("如何使用？")]),t._v(" "),e("p",[t._v("定义外层函数，封装被保护的局部变量。")]),t._v(" "),e("p",[t._v("定义内层函数，执行对外部函数变量的操作。")]),t._v(" "),e("p",[t._v("外层函数返回内层函数的对象，并且外层函数被调用，结果保存在一个全局的变量中。")]),t._v(" "),e("p",[t._v("如何解决内存泄漏？")]),t._v(" "),e("p",[t._v("主动销毁 比如在使用完后将变量赋值为null")]),t._v(" "),e("p",[t._v("循环时注意一定要有结束条件")]),t._v(" "),e("h2",{attrs:{id:"数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[t._v("#")]),t._v(" 数组去重")]),t._v(" "),e("ul",[e("li",[t._v("[...new Set(arr)]")]),t._v(" "),e("li",[t._v("Array.from(new Set(arr))")]),t._v(" "),e("li",[t._v("indexOf")]),t._v(" "),e("li",[t._v("includes")]),t._v(" "),e("li",[t._v("filter")])]),t._v(" "),e("h2",{attrs:{id:"无限列表加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无限列表加载"}},[t._v("#")]),t._v(" 无限列表加载")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ npm install -D vue-virtual-scroller\n")])])]),e("h2",{attrs:{id:"grid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grid"}},[t._v("#")]),t._v(" grid")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("display：grid 或 display：inline-grid\n\n// 三列两行\ngrid-template-columns: 100px 100px 100px;\ngrid-template-rows: 100px 100px;\n\n// fr 单位代表 网格容器 中 剩余可用空间 的 一等份\ngrid-template-columns: 1fr 100px 100px;\n\n// repeat()定义重复部分的尺寸\ngrid-template-columns: 1fr 1fr 1fr;\ngrid-template-columns: repeat(3, 1fr);\n\n// grid-column-start：定义网格项目从哪一 列网格线 开始\n// grid-column-end：定义网格项目从哪一 列网格线 结束\n// grid-row-start：定义网格项目从哪一 行网格线 开始\n// grid-row-end：定义网格项目从哪一 行网格线 结束\n\n// 我们使用grid-template-columns 和 grid-template-rows 来创建 显式网格。但是当我们的 网格项目数量 超过 了我们设定的 网格单元格 数量时，网格将会自动在 隐式网格 中创建行和列\n\n// minmax() 最小、最大\n\n// grid-column-gap 和 grid-row-gap 属性来为单元格之间设置间距\n")])])]),e("h2",{attrs:{id:"按钮权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按钮权限"}},[t._v("#")]),t._v(" 按钮权限")]),t._v(" "),e("p",[t._v("自定义v-has指令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("// 创建 has.js，v2和v3创建自定义指令方法不一样\n\nexport default{\n    inserted(el, bindings, vnode) {\n        // 当前按钮传递的值( v-has=\"'add'\" 中的值)\n        let currentTag = bindings.value\n\n        // 获取到存放在 store 中的数据\n        let btnList = vnode.context.$store.state.promiseBtn\n\n        // 判断是否存在对应的按钮权限\n        let item = btnList.filter((item) => {\n            return item === currentTag\n        })\n\n        // 没有则删除该按钮 (el.parentNode 获取当前节点的父节点)\n        if(item.length === 0) {\n            el.parentNode.removeChild(el);\n        }\n\n    }\n}\n\n// 引入 v-has\nimport has from 'xxx/has.js'\n\n// 注册\nexport default {\n    directives:{\n        has\n    }\n}\n\n// 使用\n<button v-has=\"'delete'\">删除<button>\n")])])]),e("p",[t._v("从路由meta、vuex或其他地方拿权限")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("promiseBtn:['add','delete']\n")])])]),e("h2",{attrs:{id:"路由权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由权限"}},[t._v("#")]),t._v(" 路由权限")]),t._v(" "),e("p",[t._v("一：路由元信息（meta）")]),t._v(" "),e("p",[t._v("路由守卫中检查相关权限，控制其路由跳转")]),t._v(" "),e("p",[t._v("缺点： 每次路由跳转都要做一遍校验是对计算资源的浪费，另外对于用户无权访问的路由，理论上就不应该挂载")]),t._v(" "),e("p",[t._v("二：动态生成路由表（addRoutes）")]),t._v(" "),e("p",[t._v("在 vuex 中添加 userRoutes 数组用于存储用户的定制菜单。在 setUserInfo 中根据后端返回的菜单生成用户的路由表。")]),t._v(" "),e("p",[t._v("然后router.addRoutes() 注册路由")]),t._v(" "),e("h2",{attrs:{id:"浏览器渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染"}},[t._v("#")]),t._v(" 浏览器渲染")]),t._v(" "),e("p",[t._v("流程：")]),t._v(" "),e("ul",[e("li",[t._v("解析HTML文件生成DOM Tree，解析CSS文件生成CSSOM Tree")]),t._v(" "),e("li",[t._v("将Dom Tree和CSSOM Tree结合，生成Render Tree(渲染树)")]),t._v(" "),e("li",[t._v("根据Render Tree渲染绘制，将像素渲染到屏幕上")])]),t._v(" "),e("p",[t._v("解析：")]),t._v(" "),e("ul",[e("li",[t._v("DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。")]),t._v(" "),e("li",[t._v("然而，由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。")]),t._v(" "),e("li",[t._v("由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。")])]),t._v(" "),e("p",[t._v("阻塞结论：")]),t._v(" "),e("ul",[e("li",[t._v("css加载不会阻塞DOM树的解析")]),t._v(" "),e("li",[t._v("css加载会阻塞DOM树的渲染")]),t._v(" "),e("li",[t._v("css加载会阻塞后面js语句的执行")])]),t._v(" "),e("p",[t._v("性能优化：")]),t._v(" "),e("ol",[e("li",[t._v("CDN")]),t._v(" "),e("li",[t._v("压缩css：webpack、gulp、gzip等")]),t._v(" "),e("li",[t._v("合理使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号)")]),t._v(" "),e("li",[t._v("减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)")])]),t._v(" "),e("h2",{attrs:{id:"点击li弹出索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#点击li弹出索引"}},[t._v("#")]),t._v(" 点击li弹出索引")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("//获取所有的li标签\n// var list = document.getElementById('ul').children;\n// 推荐使用querySelectorAll方法获取\nvar list = document.querySelectorAll('#ul>li');\n\n// 方法一：直接往标签里添加索引setAttribute、getAttribute\n// for (var i = 0, len = list.length; i < len; i++) { //遍历每一个li标签\n//     list[i].setAttribute('index', i); //给每一个li标签添加索引\n//     list[i].onclick = function() {\n//         alert(this.getAttribute('index')); //获取添加的li标签的元素值\n//     }\n// };\n\n// 方法二：使用闭包\nfor (var i = 0, len = list.length; i < len; i++) { //遍历每一个li标签\n    function outer() {\n        var num = i;\n        function inner() {\n            alert(num);\n        }\n        return inner;\n    }\n    list[i].onclick = outer(); //给每一个li标签注册单击事件\n};\n")])])]),e("h2",{attrs:{id:"http协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" http协议")]),t._v(" "),e("p",[t._v("HTTP是⼀个基于TCP/IP通信协议来传递数据，包括⽂件、图像、结果等，即是⼀个客户端和服务器端请求和应答的标准。")]),t._v(" "),e("p",[t._v("（1）https有ca证书，http⼀般没有；\n（2）http是超⽂本传输协议，信息是明⽂传输。https则是具有安全性的ssl加密传输协议；\n（3）http默认80端⼝，https默认443端⼝。")]),t._v(" "),e("p",[t._v("3、HTTP协议有什么特点？\n答：\n（1）http⽆连接：限制每次连接只处理⼀个请求，服务端完成客户端的请求后，即断开连接。（传输速度快，减少不必要的连接，但\n也意味着每⼀次访问都要建⽴⼀次连接，效率降低）；\n（2）http⽆状态：对于事务处理没有记忆能⼒。每⼀次请求都是独⽴的，不记录客户端任何⾏为；\n（3）客户端/服务端模型：客户端⽀持web浏览器或其他任何客户端；\n（4）简单快速；\n（5）灵活：可以传输任何类型的数据。")]),t._v(" "),e("p",[t._v("4、cookies机制和session机制的区别是什么？\n答：\n（1）cookies数据保存在客户端，session数据保存在服务端；\n（2）cookies可以减轻服务器压⼒，但是不安全，容易进⾏cookies欺骗；\n（3）session安全⼀点，但是占⽤服务器资源。")]),t._v(" "),e("p",[t._v("5、GET和POST的区别？\n答：\n简单来说：GET产⽣⼀个TCP数据包，POST产⽣两个TCP数据包。\n严格的说：对于GET⽅式的请求，游览器会把http header和data⼀并发送出去，服务器响应200（返回数据）；⽽对于POST请求。游览器先发送header，服务器响应100continue，游览器再发送data，服务器响应200 ok（返回数据）。")]),t._v(" "),e("p",[t._v("6、什么是Http协议⽆状态协议？怎么解决Http协议⽆状态协议？\n答：⽆状态协议对于事务处理没有记忆能⼒。缺少状态意味着如果后续处理需要前⾯的信息。状态协议解决办法：通过1、Cookie 2、通过\nSession会话保存。")]),t._v(" "),e("p",[t._v("7、说⼀下Http协议中302状态？\n答：http协议中，返回状态码302表⽰重定向。这种情况下，服务器返回的头部信息中会包含⼀个Location字段，内容是重定向到的url。")]),t._v(" "),e("p",[t._v("8、Http协议有什么组成？\n答：\n请求报⽂包含三部分：请求⾏：包含请求⽅法、URI、HTTP版本信息；请求⾸部字段；请求内容实体。\n响应报⽂包含三部分：状态⾏：包含HTTP版本、状态码、状态码的原因短语；响应⾸部字段；响应内容实体。")]),t._v(" "),e("p",[t._v("9、Http协议中有那些请求⽅式？\n答：\nGET：⽤于请求访问已经被URI（统⼀资源标识符）识别的资源，可以通过URL传参给服务器。\nPOST：⽤于传输信息给服务器，主要功能与GET⽅法类似，但⼀般推荐使⽤POST⽅式。\nPUT： 传输⽂件，报⽂主体中包含⽂件内容，保存到对应URI位置。\nHEAD： 获得报⽂⾸部，与GET⽅法类似，只是不返回报⽂主体，⼀般⽤于验证URI是否有效。\nDELETE：删除⽂件，与PUT⽅法相反，删除对应URI位置的⽂件。\nOPTIONS：查询相应URI⽀持的HTTP⽅法。")]),t._v(" "),e("p",[t._v("10、TCP和UDP的区别？\n答：\nTCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对⽅建⽴可靠的\n连接。⼀个TCP连接必须要经过三次“对话”才能建⽴起来。\nUDP（User Data Protocol，⽤户数据报协议）是与TCP相对应的协议。它是⾯向⾮连接的协议，它不与对⽅建⽴连接，⽽是直接就把数\n据包发送过去，UDP适⽤于⼀次只传送少量数据、对可靠性要求不⾼的应⽤环境。")]),t._v(" "),e("p",[t._v("HTTP的状态码分为哪几类？\n整体范围\t已定义范围\t分类\n100~199\t100~101\t信息提示\n200~299\t100~206\t成功\n300~399\t300~305\t重定向\n400~499\t400~415\t客户端错误\n500~599\t500~505\t服务端错误")]),t._v(" "),e("p",[t._v("重定向是服务器发起的跳转，要求客户端使用新的 URI 重新发送请求。")]),t._v(" "),e("h2",{attrs:{id:"跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),e("h2",{attrs:{id:"xss"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[t._v("#")]),t._v(" XSS")]),t._v(" "),e("p",[t._v("注入脚本攻击")]),t._v(" "),e("h2",{attrs:{id:"面向对象的特性-封装-继承-多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的特性-封装-继承-多态"}},[t._v("#")]),t._v(" 面向对象的特性:封装,继承,多态")]),t._v(" "),e("p",[t._v("封装:就是包装\n一个值存储在一个变量中–封装\n一坨重复代码放在一个函数中–封装\n一系列的属性放在一个对象中–封装\n一些功能类似的函数(方法)放在一个对象中–封装\n好多相类似的对象放在一个js文件中—封装")]),t._v(" "),e("p",[t._v("多态:一个对象有不同的行为,或者是同一个行为针对不同的对象,产生不同的结果,要想有多态,就要先有继承,js中可以模拟多态,但是不会去使用,也不会模拟,")]),t._v(" "),e("p",[t._v("原型继承:改变原型的指向")]),t._v(" "),e("p",[t._v("借用构造函数继承:主要解决属性的问题")]),t._v(" "),e("p",[t._v("组合继承:原型继承+借用构造函数继承，既能解决属性问题,又能解决方法问题")]),t._v(" "),e("p",[t._v("拷贝继承:就是把对象中需要共享的属性或者犯法,直接遍历的方式复制到另一个对象中")]),t._v(" "),e("h2",{attrs:{id:"路由模式-hash-和-history-的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由模式-hash-和-history-的实现原理"}},[t._v("#")]),t._v(" 路由模式 hash 和 history 的实现原理")]),t._v(" "),e("p",[t._v("hash 原理就是使用window.onHashChange来监听hash值的改变，一旦发生变化就找出此hash值所匹配的组件，进而将组件渲染到页面中")]),t._v(" "),e("p",[t._v("history模式中的url是以/user这种格式，比较常见，它的原理是通过window.onpopstate来监听路由变化，进而匹配不同的组件来渲染出来，只能监听到history.go、forward、back")]),t._v(" "),e("p",[t._v("hash模式不 会包含在http请求当中,并且hash不会重新加载⻚⾯")]),t._v(" "),e("p",[t._v("history模式的话,如果前端的url和后端发起请求的url不⼀致的话,会 报404错误")]),t._v(" "),e("h2",{attrs:{id:"webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),e("p",[t._v("loader 和 plugin 的区别")]),t._v(" "),e("p",[t._v("loader是转换，plugin是执行比转换更复杂的任务，比如合并压缩等")]),t._v(" "),e("p",[t._v("loader:让webpack能够处理非js文件，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n例如：css-loader、style-loader、postcss-loader、sass-loader")]),t._v(" "),e("p",[t._v("plugins:从打包优化和压缩，一直到重新定义环境中的变量.\n例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill")]),t._v(" "),e("p",[t._v("相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……")]),t._v(" "),e("p",[t._v("loader，它是一个转换器，将A文件进行编译成B文件，比如：将A.less转换为A.css，单纯的文件转换过程。")]),t._v(" "),e("p",[t._v("plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务")]),t._v(" "),e("h2",{attrs:{id:"移动端视频方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端视频方案"}},[t._v("#")]),t._v(" 移动端视频方案")]),t._v(" "),e("p",[t._v("vw 适配原理相对简单一点，也不需要获取设备屏幕的宽度，但是px换算为 vw 单位时计算会比较麻烦\nrem 需要获取屏幕的宽度，设置 的font-size，但是 px 转换 rem 却很方便")]),t._v(" "),e("p",[t._v("rem")]),t._v(" "),e("p",[t._v("px2rem()  Flexible")]),t._v(" "),e("p",[t._v("vw")]),t._v(" "),e("p",[t._v("em和rem的主要区别是：浏览器根据谁来转化成px。页根元素、父元素继承过来的字体大小")]),t._v(" "),e("p",[t._v("https://open.weixin.qq.com/connect/oauth2/authorize\n?appid=wx4f1f7906a8336f85\n&redirect_uri=http%3A%2F%2Fwww.jsons.cn\n&response_type=code&scope=snsapi_base\n&state=123\n&uin=NzYwNDcyOTQx\n&key=fe1a5aa8d5ddb85ffb925c2f8909ba0fd2284658662a679ca365722cbc7a1d0864d9c82c5c7ad284280802e155505db8&pass_ticket=gJ8CvK90AR6ongRxc21ApGZb6vKoRJA3XnQ89WjLkTwT7/NGHtE01HY1rn/fSfI5nVUTGkfhBasoJgtUFnBK+Q==&uin=NzYwNDcyOTQx&key=eb5d8e6fc7560933a9fec935cf41ecbcec470a2bca9423ca1938aa986537467b83c7e23fd6dc20675375ac6bb41501e2&pass_ticket=gJ8CvK90AR6ongRxc21ApGZb6vKoRJA3XnQ89WjLkTwT7/NGHtE01HY1rn/fSfI5nVUTGkfhBasoJgtUFnBK+Q==&uin=NzYwNDcyOTQx&key=11432b24864abbf3ad430b79e5ca1032a765a2e0dd22d149f20fc0f7a1c466046e575572f2b7e34a0e30c679faafd082&pass_ticket=gJ8CvK90AR6ongRxc21ApGZb6vKoRJA3XnQ89WjLkTwT7/NGHtE01HY1rn/fSfI5nVUTGkfhBasoJgtUFnBK+Q==")]),t._v(" "),e("p",[t._v("https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx4f1f7906a8336f85&redirect_uri=http%3A%2F%2Fnba.bluewebgame.com%2Foauth_response.php&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect")])])}),[],!1,null,null,null);e.default=s.exports}}]);