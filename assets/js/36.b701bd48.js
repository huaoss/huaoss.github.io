(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{316:function(e,n,t){"use strict";t.r(n);var a=t(13),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-js数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-js数据类型"}},[e._v("#")]),e._v(" 1. js数据类型")]),e._v(" "),n("ul",[n("li",[e._v("值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。")]),e._v(" "),n("li",[e._v("引用数据类型：对象(Object)、数组(Array)、函数(Function)。")])]),e._v(" "),n("ol",[n("li",[e._v("值类型和引用数据类型的区别？")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("基本数据类型 ----- 直接在栈内存中保存数据值，按值访问。\n当copy数据时，copy到的是数据值本身。基本数据类型的变量与变量之间是独立存在，修改其中一个变量，不会影响其他变量。\n例：\nvar str = 'aaa';\nvar str1 = str;\nstr1 = 'bbb';\nconsole.log(str); // aaa\nconsole.log(str1); // bbb\n\n引用数据类型 ----- 变量保存的是内存地址(对象的引用)，访问时访问的也是内存地址（相当于指针，在各自的内存地址里存储了数据）\n当copy数据时，copy到的是保存数据的内存地址而不是数据值本身。当两个变量保存的是同一个引用数据对象，则其中一个变量的属性发生改变，另一个变量也会随之变化。\n例：\nvar arr = ['1','2'];\nvar arr1 = arr;\narr1[1] = '3';\nconsole.log(arr); // [\"1\", \"3\"]\nconsole.log(arr1);// [\"1\", \"3\"]\n\n当比较数据时：基本数据比较的是数据值的大小；而引用型数据比较的是保存数据的内存地址——若两个变量的数据一模一样，但内存地址不同，则会返回false。\n例：\n// 基础类型\nvar i = 5;\nvar j = '5';\nconsole.log( i == j);// true\nconsole.log( i === j);// false\n//引用类型\nvar obj = {a:1,b:2};\nvar obj1 = {a:1,b:2};\nvar obj2 = obj1 ;\nconsole.log( obj == obj1);// false\nconsole.log( obj === obj1);// false\nconsole.log( obj1 === obj2);// true\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("symbol：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。")]),e._v(" "),n("li",[e._v("object和array的区别：object是无序数据集合，array是有序数据集合。")])]),e._v(" "),n("h2",{attrs:{id:"_2-a-与-a"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-a-与-a"}},[e._v("#")]),e._v(" 2. a++ 与 ++a")]),e._v(" "),n("p",[e._v("a++、a--先参与程序运行再计算；\n++a、--a先计算再运行。")]),e._v(" "),n("h2",{attrs:{id:"_3-undefined-和-null"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-undefined-和-null"}},[e._v("#")]),e._v(" 3. undefined 和 null")]),e._v(" "),n("ul",[n("li",[e._v("都属于基础数据类型")]),e._v(" "),n("li",[e._v("都是假值，转换为 boolean 值是都是 false")]),e._v(" "),n("li",[e._v("undefined是尚未分配特定值的变量的默认值；或没有显式返回值的函数，例如console.log(1)；或对象中不存在的属性。JavaScript引擎为我们分配了undefined这个值以实现上述目的")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let _thisIsUndefined;\nconst doNothing = () => { };\nconst someObj = {\n    a: "ay",\n    b: "bee",\n    c: "si"\n};\n\nconsole.log(_thisIsUndefined); //logs undefined\nconsole.log(doNothing()); //logs undefined\nconsole.log(someObj["d"]); //logs undefined\n')])])]),n("ul",[n("li",[e._v("null意味着“变量值为空”。null是已明确定义给变量的值。在示例中，当fs.readFile方法未引发错误时，我们将得到的值为null。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fs.readFile('path/to/file', (e, data) => {\n    console.log(e); //it logs null when no error occurred\n    if (e) {\n        console.log(e);\n    }\n    console.log(data);\n});\n")])])]),n("p",[e._v("-比较null和undefined时，使用==时为true，使用===时为false。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(null == undefined); // logs true\nconsole.log(null === undefined); // logs false\n")])])]),n("h2",{attrs:{id:"_4-运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-运算符"}},[e._v("#")]),e._v(" 4. && 运算符")]),e._v(" "),n("p",[e._v("&&运算符会在其操作数中找到第一个为假的表达式，并将其返回；如果未找到任何为假的表达式，则将返回最后一个表达式。它采取短路以防止不必要的工作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('console.log(false && 1 && []); //logs false\nconsole.log(" " && true && 5); //logs 5\n')])])]),n("p",[e._v("使用&&运算符简写if语句，并提高js性能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const router: Router = Router();\n\n// 使用if语句\nrouter.get('/endpoint', (req: Request, res: Response) => {\n    let conMobile: PoolConnection;\n    try {\n        //do some db operations\n    } catch (e) {\n        if (conMobile) {\n            conMobile.release();\n        }\n    }\n});\n\n// 使用&&运算符\nrouter.get('/endpoint', (req: Request, res: Response) => {\n    let conMobile: PoolConnection;\n    try {\n        //do some db operations\n    } catch (e) {\n        conMobile && conMobile.release()\n    }\n});\n\n")])])]),n("h2",{attrs:{id:"_5-运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-运算符"}},[e._v("#")]),e._v(" 5. || 运算符")]),e._v(" "),n("p",[e._v("||运算符会在其操作数中找到第一个为真的表达式，然后将其返回。这也采用了短路以防止不必要的工作。在支持ES6默认函数参数之前，它曾用于初始化函数中的默认参数值。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('console.log(null || 1 || undefined); //logs 1\n\nfunction logName(name) {\n  var n = name || "Mark";\n  console.log(n);\n}\n\nlogName(); //logs "Mark"\n')])])]),n("h2",{attrs:{id:"_6-字符串转换为数字的最快方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-字符串转换为数字的最快方法"}},[e._v("#")]),e._v(" 6. 字符串转换为数字的最快方法？")]),e._v(" "),n("p",[e._v("使用 + 或一元加操作符，因为如果已经是数字，则对值不执行任何操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var num = "25";\nnum = +num; // 25\n')])])]),n("p",[e._v("ps：")]),e._v(" "),n("p",[e._v("布尔值false 和true 将被转换为0 和1")]),e._v(" "),n("p",[e._v("一元减法运算符对十六进制和十进制的处理方式与一元加法运算符相似，只是它还会对该值求负")]),e._v(" "),n("h2",{attrs:{id:"_7-什么是dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是dom"}},[e._v("#")]),e._v(" 7. 什么是DOM？")]),e._v(" "),n("p",[e._v("DOM即Document Object Model（文档对象模型），是HTML和XML文档的接口（API）。当浏览器第一次读取（解析）我们的HTML文档时，它会创建一个大对象，一个非常大的基于HTML文档的对象，这就是DOM。它是从HTML文档建模的树状结构。DOM用于交互和修改DOM结构或特定的元素或节点。")]),e._v(" "),n("h2",{attrs:{id:"_8-什么是事件传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-什么是事件传递"}},[e._v("#")]),e._v(" 8. 什么是事件传递？")]),e._v(" "),n("p",[e._v("当事件发生在DOM元素上时，该事件并不完全发生在一个元素上。在“冒泡阶段”中，事件冒泡或向上传递至其父代，其祖代，其祖代的父代，直到到达window为止；而在“捕获阶段”中，事件则从window开始向下直到触发该事件的元素或event.target。")]),e._v(" "),n("p",[e._v("事件传递分为三个阶段：")]),e._v(" "),n("ul",[n("li",[e._v("捕获阶段 – 事件从window开始，然后下降到每个元素，直到到达目标元素。")]),e._v(" "),n("li",[e._v("目标阶段 – 事件已达到目标元素。")]),e._v(" "),n("li",[e._v("冒泡阶段 – 事件从目标元素冒泡，然后上升到每个元素，直到到达window。")])]),e._v(" "),n("h2",{attrs:{id:"_9-什么是事件冒泡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是事件冒泡"}},[e._v("#")]),e._v(" 9. 什么是事件冒泡？")]),e._v(" "),n("p",[e._v("当事件发生在DOM元素上时，该事件并不完全发生在一个元素上。在冒泡阶段，事件向上冒泡，或去到它的父代，祖代，祖代的父代，直到到达window为止。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 假设有这样的html标记：\n<div class=\"grandparent\">\n    <div class=\"parent\">\n        <div class=\"child\">1</div>\n    </div>\n</div>\n\n// 以及js代码：\nfunction addEvent(el, event, callback, isCapture = false) {\n  if (!el || !event || !callback || typeof callback !== 'function') return;\n  if (typeof el === 'string') {\n    el = document.querySelector(el);\n  };\n  el.addEventListener(event, callback, isCapture);\n}\n\naddEvent(document, 'DOMContentLoaded', () => {\n  const child = document.querySelector('.child');\n  const parent = document.querySelector('.parent');\n  const grandparent = document.querySelector('.grandparent');\n\n  addEvent(child, 'click', function (e) {\n    console.log('child');\n  });\n\n  addEvent(parent, 'click', function (e) {\n    console.log('parent');\n  });\n\n  addEvent(grandparent, 'click', function (e) {\n    console.log('grandparent');\n  });\n\n  addEvent(document, 'click', function (e) {\n    console.log('document');\n  });\n\n  addEvent('html', 'click', function (e) {\n    console.log('html');\n  })\n\n  addEvent(window, 'click', function (e) {\n    console.log('window');\n  })\n\n});\n")])])]),n("p",[e._v("addEventListener方法的第三个可选参数useCapture，其默认值如果为false，事件将在冒泡阶段中触发；默认值如果为true，则事件将在捕获阶段中触发。如果单击child元素，它将分别在控制台上打印child，parent，grandparent，html，document和window。这就是事件冒泡。")]),e._v(" "),n("h2",{attrs:{id:"_10-什么是事件捕获"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么是事件捕获"}},[e._v("#")]),e._v(" 10. 什么是事件捕获？")]),e._v(" "),n("p",[e._v("当事件发生在DOM元素上时，该事件并不完全发生在一个元素上。在捕获阶段，事件从window出发一直向下直到到达触发事件的元素。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 假设有这样的html标记：\n<div class=\"grandparent\">\n    <div class=\"parent\">\n        <div class=\"child\">1</div>\n    </div>\n</div>\n\n// 以及js代码：\nfunction addEvent(el, event, callback, isCapture = false) {\n  if (!el || !event || !callback || typeof callback !== 'function') return;\n  if (typeof el === 'string') {\n    el = document.querySelector(el);\n  };\n  el.addEventListener(event, callback, isCapture);\n}\n\naddEvent(document, 'DOMContentLoaded', () => {\n  const child = document.querySelector('.child');\n  const parent = document.querySelector('.parent');\n  const grandparent = document.querySelector('.grandparent');\n\n  addEvent(child, 'click', function (e) {\n    console.log('child');\n  }, true);\n\n  addEvent(parent, 'click', function (e) {\n    console.log('parent');\n  }, true);\n\n  addEvent(grandparent, 'click', function (e) {\n    console.log('grandparent');\n  }, true);\n\n  addEvent(document, 'click', function (e) {\n    console.log('document');\n  }, true);\n\n  addEvent('html', 'click', function (e) {\n    console.log('html');\n  }, true)\n\n  addEvent(window, 'click', function (e) {\n    console.log('window');\n  }, true)\n\n});\n")])])]),n("p",[e._v("addEventListener方法的第三个可选参数useCapture，其默认值如果为false，事件将在冒泡阶段中触发；如果默认值为true，则事件将在捕获阶段中触发。如果我们单击child元素，它将分别在控制台上打印window，document，html，grandparent，parent和child。这就是事件捕获。")]),e._v(" "),n("h2",{attrs:{id:"_11-event-preventdefault-和event-stoppropagation-方法之间有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-event-preventdefault-和event-stoppropagation-方法之间有什么区别"}},[e._v("#")]),e._v(" 11. event.preventDefault()和event.stopPropagation()方法之间有什么区别？")]),e._v(" "),n("ul",[n("li",[e._v("event.preventDefault()方法可阻止元素的默认行为。如果在form元素中使用，它将阻止其提交。如果在anchor元素中使用，它将阻止其导航。如果用于contextmenu，它将阻止其显示或展示。")]),e._v(" "),n("li",[e._v("而event.stopPropagation()方法则是阻止事件的传递，或者在冒泡或捕获阶段阻止事件触发。")])]),e._v(" "),n("h2",{attrs:{id:"_12-如何知道是否在元素中使用了event-preventdefault-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-如何知道是否在元素中使用了event-preventdefault-方法"}},[e._v("#")]),e._v(" 12. 如何知道是否在元素中使用了event.preventDefault()方法？")]),e._v(" "),n("p",[e._v("可以在事件对象中使用event.defaultPrevented属性。它返回boolean，指出是否在特定元素中调用event.preventDefault()。")]),e._v(" "),n("h2",{attrs:{id:"_13-一行代码如何实现深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-一行代码如何实现深拷贝"}},[e._v("#")]),e._v(" 13. 一行代码如何实现深拷贝？")]),e._v(" "),n("ul",[n("li",[e._v("递归实现深拷贝函数，缺点：代码复杂")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deepClone(obj) {\n\tvar objClone = Array.isArray(obj) ? [] : {};\n\tif (obj && typeof obj === 'object') {\n\t\tfor (key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t//判断obj的子元素是否为object对象，如果是则就递归拷贝\n\t\t\t\tif (obj[key] && typeof obj[key] === 'object') {\n\t\t\t\t\tobjClone[key] = deepClone(obj[key])\n\t\t\t\t} else {\n\t\t\t\t\t//如果不为对象就直接拷贝\n\t\t\t\t\tobjClone[key] = obj[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\treturn objClone;\n};\n")])])]),n("ul",[n("li",[e._v("使用json实现深拷贝，缺点：1.无法拷贝对象中的方法属性；2.无法拷贝 对象中值为undefined的属性")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function deepClone2(obj) {\n\tlet _obj = JSON.stringify(obj);\n\treturn JSON.parse(_obj);\n}\n// 写成一行\nlet obj = JSON.parse(JSON.stringify(ar));\n")])])]),n("ul",[n("li",[e._v("使用jquery中的extend属性：1.需要引用jQuery库；2.无法拷贝 对象中值为undefined的属性")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$.extend(true,[],object)\n\n语法：jQuery.extend( [deep ], target, object1 [, objectN ] )\n深浅拷贝对应的参数就是[deep]，是可选的，为true或false。默认情况是false（浅拷贝），并且false是不能够显示的写出来的。如果想写，只能写true（深拷贝）\n")])])]),n("h2",{attrs:{id:"_14-一行代码实现数组去重-es6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-一行代码实现数组去重-es6"}},[e._v("#")]),e._v(" 14. 一行代码实现数组去重（ES6）？")]),e._v(" "),n("p",[e._v("ES6中新增了Set数据结构，类似于数组，但是 它的成员都是唯一的 ，其构造函数可以接受一个数组作为参数，如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let array = [1, 1, 1, 1, 2, 3, 4, 4, 5, 3];\nlet set = new Set(array);\nconsole.log(set);\n// => Set {1, 2, 3, 4, 5}\n")])])]),n("p",[e._v("ES6中Array新增了一个静态方法Array.from，可以把类似数组的对象转换为数组，如通过querySelectAll方法得到HTML DOM Node List，以及ES6中新增的Set和Map等可遍历对象，如：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let set = new Set();\nset.add(1).add(2).add(3);\nlet array = Array.from(set);\nconsole.log(array);\n// => [1, 2, 3]\n")])])]),n("p",[e._v("于是，现在我们可以用一行代码实现数组去重了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let array = Array.from(new Set([1, 1, 1, 2, 3, 2, 4]));\nconsole.log(array);\n// => [1, 2, 3, 4]\n")])])]),n("p",[e._v("附：ES5实现数组去重")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var array = [1, '1', 1, 2, 3, 2, 4];\nvar tmpObj = {};\nvar result = [];\narray.forEach(function(a) {\n  var key = (typeof a) + a;\n  if (!tmpObj[key]) {\n    tmpObj[key] = true;\n    result.push(a);\n  }\n});\nconsole.log(result);\n// => [1, \"1\", 2, 3, 4]\n")])])]),n("h2",{attrs:{id:"_15-js中new一个对象的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-js中new一个对象的过程"}},[e._v("#")]),e._v(" 15. js中new一个对象的过程？")]),e._v(" "),n("p",[e._v("使用new关键字调用函数（new ClassA(…)）的具体步骤：")]),e._v(" "),n("ol",[n("li",[e._v("创建空对象{}")]),e._v(" "),n("li",[e._v("使用新对象，调用函数，函数中的this被指向新实例对象：{}.构造函数();")]),e._v(" "),n("li",[e._v("设置新对象的constructor属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的prototype对象")]),e._v(" "),n("li",[e._v("将初始化完毕的新对象地址，保存到等号左边的变量中")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Tennis(){\n    let this = {\n        __proto__: Tennis.prototype\n    }\n    // .....\n    // let this.xxx = xxx\n    // .....\n    return this    \n}\n")])])]),n("p",[e._v("注意：若构造函数中没有返回值或返回值是基本类型（Number、String、Boolean）的值，则返回新实例对象；若返回值是引用类型的值，则实际返回值为这个引用类型。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var foo = "bar";\nfunction test () {\n this.foo = "foo";\n}\nnew test();// test中的this指新对象，并未改变全局的foo属性\nconsole.log(this.foo);  // "bar"\nconsole.log(new testThis().foo); // "foo";new和属性访问.运算符优先级相通，从左往右执行\n')])])]),n("h2",{attrs:{id:"_16-javascript定义函数的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-javascript定义函数的方法"}},[e._v("#")]),e._v(" 16. javascript定义函数的方法")]),e._v(" "),n("ul",[n("li",[e._v("一、函数声明，使用关键字 function 定义函数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function functionName(parameters) {\n    执行的代码\n}\n")])])]),n("p",[e._v("函数声明后不会立即执行，会在我们需要的时候调用到。")]),e._v(" "),n("ul",[n("li",[e._v("二、函数表达式（使用表达式定以的函数无法提升）\nJavaScript 函数可以通过一个表达式定义，函数表达式可以存储在变量中：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var x = function (a, b) {return a * b};\n")])])]),n("ul",[n("li",[e._v("三、Function() 构造函数，通过内置的 JavaScript 函数构造器（Function()）定义")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var myFunction = new Function("a", "b", "return a * b");\nvar x = myFunction(4, 3);\n')])])]),n("ul",[n("li",[e._v("四、Lambda 表达式：es6箭头函数（fat arrow function）")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var greet = (greeting, name) => {\n return `${greeting}, ${name}`\n}\n// 上面这个函数的主体部分只有一行，就是 return 了一个字符串，所以我们可以让它更简洁一些：\nvar greet = (greeting, name) => `${greeting}, ${name}`\n// 箭头右边的东西会自动被返回（return）。\n")])])]),n("ul",[n("li",[e._v("自调用函数：1.如果表达式后面紧跟 () ，则会自动调用；2.不能自调用声明的函数。\n通过添加括号，来说明它是一个函数表达式：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('(function () {\n  var x = "Hello!!";   // 我将调用自己\n})();\n\n// 也可以如下写：\n!function(){}();\n+function(){}();\n-function(){}();\n~function(){}();\n~(function(){})();\nvoid function(){}();\n(function(){}());\n\n// 以上函数实际上是一个 匿名自我调用的函数 (没有函数名)。\n')])])]),n("hr"),e._v(" "),n("ul",[n("li",[e._v("跨域常用后端解决，前端如何解决")]),e._v(" "),n("li",[e._v("双向数据加密传输")]),e._v(" "),n("li",[e._v("移动端、pc端加载优化，首页优化，分模块打包等")]),e._v(" "),n("li",[e._v("各框架网络请求对比")]),e._v(" "),n("li",[e._v("虚拟dom为什么能提高性能\n它通过js的Object对象模拟DOM中的节点，然后再通过特定的render方法将其渲染成真实的DOM节点 dom。")]),e._v(" "),n("li",[e._v("es6新特性")]),e._v(" "),n("li",[e._v("promise")]),e._v(" "),n("li",[e._v("理解 JavaScript 的 async/await")])])])}),[],!1,null,null,null);n.default=s.exports}}]);